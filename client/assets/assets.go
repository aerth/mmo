// Code generated by go-bindata.
// sources:
// assets/guysley.png
// assets/mrman.png
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _guysleyPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x45\x03\xba\xfc\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x40\x00\x00\x00\x40\x08\x06\x00\x00\x00\xaa\x69\x71\xde\x00\x00\x03\x0b\x49\x44\x41\x54\x78\x5e\xed\x9a\xb1\x4a\xc4\x40\x10\x86\x37\x58\x79\x36\x82\xaf\x60\x6b\x67\x2b\xa2\x60\x27\x08\x36\x96\x56\x62\x2b\x16\x36\x2a\x22\x9c\x8d\x85\x58\x58\x69\x65\x69\x23\x08\xbe\x80\x5a\x09\x76\xb6\xbe\x80\x85\x68\x73\xa7\xdd\x09\x9b\xfd\x03\x99\xcb\xdc\xec\xde\x6e\x8c\x64\x37\xd5\x5d\x2e\xd9\xcb\xfe\xf3\xcd\x3f\xb3\x49\x32\x15\xf9\x96\x45\x3e\x7f\x95\x04\x48\x04\x44\xae\x40\x4a\x81\xa6\x01\x18\x0c\x06\x03\x9f\x6b\xc8\xb2\xcc\x2b\x88\x5e\x27\xfb\x5c\x38\xce\x6d\xbd\x00\xb6\x13\xec\xdd\xdf\x39\xe9\x39\xb5\xba\x56\x3a\x7e\x5c\x12\x6a\x27\x20\x5a\x01\xe8\xc4\x11\x21\xba\xdf\x35\xf2\x14\x13\x5f\x12\x6a\x23\x20\x5a\x01\x30\x71\x1a\x59\x1a\x29\xdf\xc8\x87\x22\x21\x38\x01\xd1\x09\x60\x9b\xd3\x20\x20\x74\xe4\x39\x12\x6c\xab\x82\x37\x01\x49\x00\xd3\xc9\x49\x91\x6d\x3d\x01\xd1\x09\xc0\x99\x1d\xd7\xce\xfd\x15\x01\xf8\xff\x89\xe7\x17\xfd\x71\xb2\xdb\x1d\x99\xe6\x63\x7b\x40\x12\xc0\x32\xf7\x11\x91\x44\x80\x59\xbc\x48\x5e\xe1\xb4\x22\x1a\x71\x70\x4a\x01\xe3\x01\x33\x17\xef\x5a\xa6\xfe\xd7\x55\x65\xba\xb7\xde\x03\x82\x0b\xe0\x6a\x7e\x4d\x7b\x40\x12\x20\x74\x0a\xfc\x77\x02\x60\x7e\x20\x0f\x04\xe0\x3b\xf5\x02\x67\x0f\x88\x56\x80\xce\xf4\x96\xbe\x7b\xdb\xfb\xbc\xd4\x62\xba\x96\xb3\xba\xef\x07\xd0\x0e\xf0\x7a\x79\xb3\x54\x24\x77\xd7\x4f\x2b\xab\x81\x35\x01\xd1\x0a\x80\x89\x43\xce\x71\x09\xa8\xbb\x1a\x20\xf7\x69\xe4\x69\xaf\x44\x49\x10\x09\x48\x02\x98\xdc\x3f\xbb\xdd\xd3\x62\x6e\x2f\xcd\x8e\xe5\x01\x94\x80\x82\x28\xc7\xe7\x01\x34\xa2\x43\xae\xff\x90\x77\x7e\x67\xc7\xf9\xf5\x06\x23\x20\x09\x40\x08\x70\x8d\x20\x22\x75\xb3\xb6\xa3\x4f\xdd\x9c\x9f\x29\x05\xc7\xb6\xaa\xd0\x88\x63\x10\xac\xfb\x3b\x0b\x79\xb5\x92\x08\xc0\x79\xd6\x1e\x40\x09\x68\xbd\x00\xd4\xfc\x20\x00\x26\x0e\x2f\x90\x84\xa0\x91\xaf\x4c\x4c\xa5\xd4\xc6\xdd\x39\xf7\x53\xe5\xfe\x93\x95\x7d\xbd\xbf\xbb\x38\x59\x0a\xa2\x44\x00\x06\x43\x35\x60\x09\x48\x02\x10\xf7\x1f\x72\xd3\xa3\xbc\xb3\xea\x3d\xe6\x9d\x21\xb6\x9f\xc3\xc3\xca\x88\x21\xf7\x9d\xc2\x3c\xe2\xe0\xb7\xfe\xd4\xdf\x10\x40\xd1\x2f\x10\x4a\x02\xe4\x04\x60\xeb\x3f\x95\xef\xb8\x1c\x3c\x7c\x6b\x37\x9e\xed\xf4\x42\x05\x5d\x8f\x83\xc8\x63\xd0\xda\x3d\x40\x22\xa0\x75\x02\x48\xe6\xc7\x79\x01\x25\x00\xc7\x61\xf9\x7c\xfd\xf2\x11\x84\x04\x2e\xf7\x31\xb8\x77\x15\x48\x02\x08\xee\xdf\x14\x01\x52\xee\x53\x02\xf0\x5d\xea\x08\x87\xfa\x00\x10\xc0\xe5\x7e\x12\xc0\x28\xb0\x6b\xca\x20\x67\x82\xf4\xb1\x39\xe7\x01\x74\x4d\x80\xe3\x68\xc4\x39\xd7\xe7\x8c\x45\xf2\x02\xb6\x13\xb4\x25\x20\x5a\x01\xa4\x89\xbb\xba\x3f\x08\xc0\x1b\x1d\xe8\x1f\x5c\x23\x4e\x49\xa8\x8d\x80\x24\x80\xc9\x7d\xae\xee\xfb\x12\x10\xa4\x59\x50\x4a\x71\x04\x20\xf7\xf1\x3f\xce\x55\x00\x04\x44\x27\x80\x2d\xfa\x94\x00\xdb\x88\xda\xbe\xd5\x25\x8d\x87\xc8\x73\x7d\x80\x78\x57\x98\xab\x02\xd1\x09\x50\x28\x68\xee\x05\xda\xa2\x2f\x45\xa8\xee\xdf\xa5\xdc\x17\x9f\x0d\x72\x6b\x81\x68\x04\x28\x7a\x6a\xb2\x26\x70\x4d\x81\xba\x23\x6d\xdb\x01\x52\xd7\x17\x09\x48\x02\x18\x05\x24\x33\x94\xca\x60\xd3\x04\xa8\xd7\xf2\x15\x38\xbf\x23\x14\xbd\x00\x34\x15\x0a\x3d\xe7\xf2\x4f\xff\x96\x00\xe3\x5d\xc5\x2a\x95\x79\x3b\x8c\xed\x04\x87\x16\x15\x64\x40\x15\x9b\x00\x1c\x09\x5c\x4e\x35\x95\xfb\xf4\x3a\x6d\xaf\x4f\x7c\x36\xd8\x76\x01\x7e\x01\x9a\xfe\x4f\x4a\x33\xee\x63\x97\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x00\x01\x00\x00\xff\xff\x6d\x0a\x67\xca\x45\x03\x00\x00")

func guysleyPngBytes() ([]byte, error) {
	return bindataRead(
		_guysleyPng,
		"guysley.png",
	)
}

func guysleyPng() (*asset, error) {
	bytes, err := guysleyPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "guysley.png", size: 837, mode: os.FileMode(420), modTime: time.Unix(1496808406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mrmanPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xa3\x05\x5c\xfa\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x80\x00\x00\x00\x80\x08\x06\x00\x00\x00\xc3\x3e\x61\xcb\x00\x00\x05\x68\x49\x44\x41\x54\x78\x5e\xed\x9d\xeb\x72\xeb\x20\x0c\x84\x9b\xf7\x7f\xe8\x74\xe6\x34\xf6\x24\x9c\xd8\xe8\xb2\x20\x09\xb6\x7f\x83\x84\xb4\xfa\x10\x36\x76\x93\xc7\x0f\xff\xb6\x56\xe0\xb1\x75\xf6\x4c\xfe\x87\x00\x6c\x0e\x01\x01\x20\x00\x9b\x2b\x30\x39\xfd\xe7\xf3\xf9\xb4\x4c\xf9\x78\x3c\x86\x2c\xd6\x21\x4e\x2d\x09\xee\x62\xb3\x2d\x00\xd9\x12\x9f\x05\x9c\x35\x6f\x6d\x7c\xd6\x0e\x31\xad\x03\x58\x85\xb0\x26\xa6\x15\x70\xd4\x78\x6b\xde\xda\x78\xac\x3a\x0d\x03\x20\x7b\xe2\x5a\x81\xa5\xe3\x67\xe5\xdd\xc6\x43\x00\xa4\x15\x1a\x3c\x6e\x5b\x00\xaa\x25\x8e\xe6\x20\x2a\x7f\x6f\x27\x80\x6d\x01\x51\x02\x58\x5b\x1f\x01\xf8\x53\xc0\x0d\x40\x54\xe1\xbd\xe4\xcf\x02\x40\x7a\xfb\x7e\x75\x3c\x20\xb5\x3f\xf2\x39\xfc\x48\x17\x06\x01\x00\x91\x70\xb5\x10\xa4\x05\x5c\x0e\x80\xec\x89\x83\xea\x7e\xba\x21\x00\x8d\xa2\x04\xe0\xb5\xc7\x0a\x4f\x70\xd9\x01\x8c\x00\x59\xf7\x3e\x54\x07\xf0\xae\xfc\x36\x8e\xb7\x3d\xdc\x14\x62\x9a\x6b\x80\x5d\x3a\xc0\xb6\x00\x54\x4f\xdc\xb4\xbc\xbe\x18\xb5\x3a\x48\xc1\xbf\x9a\xbf\x4c\x07\x20\x00\x7f\x25\x24\x00\x2f\x94\xab\x91\xbf\x6a\x07\xd0\x9e\xed\x98\xcf\x01\xaa\x93\x4f\x00\x9c\x27\x81\xd9\x00\xd0\x92\x9f\x0d\x80\xf6\x36\x50\xdb\x51\xb5\x57\xff\x47\xfe\xcb\x74\x00\x02\xf0\xf7\xa6\x99\xf4\x08\x38\x0d\x00\x51\xe4\x8f\xea\x00\x28\xbf\x56\x3f\x04\xc0\xaa\x9c\xd1\x2e\xcb\xc3\xb0\x73\x45\x2b\xf7\x0e\xd8\x16\x60\xd4\x0f\x66\xa6\x25\x1f\x35\x31\x01\x40\x29\xe9\xf4\x43\x00\xce\x67\x0f\xaa\x45\xad\x1a\xfc\x5e\xa3\xea\xe4\x3b\x79\x3b\xcd\xb3\xe8\x60\x5d\x00\x04\xc0\x49\x02\x01\x70\x0a\xe8\x35\xb7\x92\xef\x9d\xf7\xe6\x2c\xdf\xf4\x9f\x3f\xde\x78\xac\x3a\x94\xef\x00\xd6\xc4\xbd\x82\x6f\x0f\x40\x2b\x40\x54\x2b\xcc\x06\xc0\xa1\xcb\x2c\x3d\xbc\xf9\x9b\x3b\x00\x01\xb8\xef\x21\xdb\x01\x50\x8d\xfc\x51\x5b\x80\xd5\xef\x01\x8c\x77\x45\x6b\xe7\x87\x75\x00\x02\xa0\x95\xfe\x73\xfc\x32\x00\x68\x65\x88\x4a\x5c\x1b\xe7\xe8\xf1\x51\x3a\xc0\x3b\x80\x56\xa8\xa8\xc4\xb5\x71\x8e\x1e\x1f\xa5\x03\x01\x18\x5d\xd9\x8e\xff\x9b\x57\xeb\xa6\xd4\x66\xca\x24\x77\x1a\x44\x91\x1f\x5c\xf7\xee\x51\xf2\xac\x8b\x41\x02\x10\x44\xc2\x97\x37\xaa\xfe\xd5\x62\x76\x47\x20\x00\x04\x20\x48\x81\xd7\xb4\xbb\x6d\x01\xda\x15\x7e\xd5\x29\x50\x55\x63\x07\x40\x29\x29\xf4\xb3\x3c\x00\x55\x8e\x40\x85\xf5\x82\x0d\xeb\xed\xf9\xd2\x8b\x3e\x74\x47\x80\x77\x00\x02\xf0\x9d\x99\xe5\x01\xb0\xee\xe5\x5a\x3b\xf4\x0a\x80\x2d\xf1\xc6\x91\xb4\xd5\x5b\xf3\xb1\xda\xb5\xf9\xc2\x3a\x80\xb6\x90\xed\xb3\x83\xa8\x16\x48\x00\x40\x0a\x68\x01\xf0\x12\xec\xb5\x07\xa5\x7d\xe9\xc6\xaa\x87\x74\x21\xa0\xe2\x0f\xeb\x00\xde\x02\x7a\xed\x51\x02\x5e\xf9\xd9\x0e\x00\xad\xa0\x5a\x81\xb4\xfe\xa3\xc6\x4b\xc1\xec\x5d\x2c\xcf\xea\x04\xb0\x0e\xa0\x15\x9c\x00\xdc\x7f\x6d\x3c\x01\xd0\x12\x55\x6c\x7c\x6f\x01\xf4\x3e\x47\xa5\xcb\x0e\x80\x52\x52\xe9\xa7\x57\xe0\xde\xe7\xca\xe9\x2e\x87\x4f\x07\xa0\xb7\xf7\x5d\x45\x3a\xab\x25\xa2\x84\xed\x5d\x1c\x1e\x9f\x5f\xe5\x25\xbd\x96\xf0\xc6\x4b\x00\xbc\x0a\x2a\xed\xa5\x85\x95\x8e\x53\x4e\xff\xdf\xf0\x61\x00\xf4\x4e\xc2\xa4\x2d\xae\xe7\xc7\x2b\xc0\x2c\x7b\x6b\x41\xa5\x3a\x59\xf3\x20\x00\x56\xe5\x94\x76\xcb\x03\x60\x4d\x50\xa9\xe3\xb7\xaf\x65\x1b\x06\xb1\x36\xb6\x6f\xe3\xbd\xba\x94\xe9\x00\xde\x44\xa5\x62\xcf\x9a\x47\x1a\x4f\x6f\x9c\x37\xde\xb4\x00\x78\x13\xeb\x09\xd7\xfb\x3c\x7a\xfe\xea\xf1\x9d\x77\x21\xbd\x44\xbc\xb7\x33\x56\xff\x3d\x3b\x02\xd0\x53\x48\xf6\xb9\x7a\xff\xcc\x2e\xbc\x2c\x6d\x8e\x32\x77\x00\x02\xb0\x16\x3c\xea\x0e\xb0\x56\xfa\xcc\x86\x00\x6c\xce\x00\x01\x20\x00\x9b\x2b\xb0\x79\xfa\xec\x00\x04\x60\x73\x05\x36\x4f\x7f\x78\x07\xd8\xfd\xf9\x7f\x76\xbe\x08\x40\xf6\x0a\x0d\x8e\x0f\x0e\x80\x75\xc5\x6b\xf3\x5c\xe5\x0d\x21\x6d\xde\xe8\xf1\x04\x00\xad\x68\x31\x7f\x6e\x00\x66\xad\xf8\x56\x57\x76\x00\x0c\x69\x04\x00\xa3\x63\x59\x2f\x66\x00\xa2\x56\x3e\x3b\x01\x96\x35\x02\x80\xd5\xb3\x9c\x37\x38\x00\xd2\xdf\x2c\x8a\xfa\xb9\xf4\x72\x15\x1a\x1c\x30\x01\x18\x2c\x70\x76\xf7\x04\x20\x7b\x85\x06\xc7\x47\x00\x06\x0b\x9c\xdd\xbd\x1a\x80\x9b\xff\xd4\x31\xe5\xfa\xf6\x9b\xb7\x5e\x7b\x75\x2e\xa6\x09\x17\x33\x52\x8b\x46\x00\xd6\x22\xc0\x0d\x80\xf4\xaa\xff\x4a\x36\x76\x80\x58\xa0\x08\x40\xac\xfe\xe1\xb3\x97\x07\x20\xea\x67\xe3\xc3\x2b\x07\x0a\x80\x00\x80\x84\xac\xea\x26\x0c\x80\xf6\x24\x50\x7b\x2d\xf1\x76\xed\xa0\xce\xa1\x6a\xb1\x46\xc4\xad\x16\xef\xcb\x7f\x06\x99\xe2\x22\x00\x26\xd9\xe0\x46\x6e\x00\xe0\x11\x29\x1d\xf2\xbd\x00\xa5\x60\xcd\x70\x02\xe0\xd3\xaf\xbc\x35\x01\x28\x5f\x42\x5f\x02\x04\xc0\xa7\x5f\x79\xeb\xb2\x00\x70\xef\xc7\xb0\x47\x00\x30\x3a\x96\xf5\xa2\x06\xa0\xcd\x34\xea\xdd\x40\x76\x00\x0c\x73\x04\x00\xa3\x63\x59\x2f\x6e\x00\x8e\xcc\x67\x75\x02\xae\x7c\x2c\x6b\x04\x00\xab\x67\x39\x6f\x30\x00\xb4\x99\x8f\xfe\x02\x44\x6d\x3c\xbb\x8e\x27\x00\xbb\x56\xfe\x95\x37\x01\x20\x00\x31\x0a\x70\x0b\x88\xd1\xbd\x9d\x75\x7a\x07\xe0\x17\x4d\xe6\x28\xfc\x11\x05\x01\xc8\x55\x8f\xe9\xd1\x4c\x03\x80\x2b\x7f\x7a\x6d\x45\x13\x12\x00\x91\x4c\xeb\x0e\x0a\x03\xe0\xdc\x83\xb4\x2f\x03\xae\x5b\x8b\x90\xcc\x08\x40\x88\xec\x79\x26\xed\x02\x60\xdd\xbb\x7b\xcf\x06\x8e\x33\x7d\xeb\xed\xa0\xd5\x2e\x8f\xf4\x39\x22\x21\x00\x39\xea\x10\x16\x45\x17\x00\xef\xd3\x3e\xe9\x4a\x97\x76\x1a\xe9\xb8\x30\x45\x8b\x4d\x4c\x00\x8a\x15\x0c\x1d\xae\x18\x00\xef\xc4\xd2\x3d\xbb\x77\xed\xc0\xbb\x07\x6f\x25\x3e\xed\x09\x00\x56\xcf\x72\xde\xd2\x01\x50\x4e\xc1\xe2\x01\x13\x80\xe2\x05\xf4\x86\x3f\x1c\x00\xee\xe9\xde\x12\x8d\xb5\x27\x00\x63\xf5\x4d\xef\x7d\x18\x00\x57\xf7\xeb\xd2\x8e\xc0\xab\xfd\x39\xec\x10\x80\x39\x3a\xa7\x9d\x05\x0e\x80\xf4\xa4\xae\x77\x2e\x70\xf3\x75\x74\xf0\x98\xd3\x56\x67\x42\x60\x70\x31\x09\xc0\x84\xaa\x01\xa7\x80\x01\x20\x2d\xbc\x35\x76\x76\x04\xab\x72\xf7\x76\x04\x60\x8c\xae\x65\xbc\xc2\x00\x28\x93\x31\x03\xfd\x50\x80\x00\x6c\x0e\xc4\x2f\x60\x86\x6e\xbd\x8c\x2b\xcb\x60\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x00\x00\x01\x00\x00\xff\xff\xbc\x50\x7d\x35\xa3\x05\x00\x00")

func mrmanPngBytes() ([]byte, error) {
	return bindataRead(
		_mrmanPng,
		"mrman.png",
	)
}

func mrmanPng() (*asset, error) {
	bytes, err := mrmanPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mrman.png", size: 1443, mode: os.FileMode(420), modTime: time.Unix(1496888423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"guysley.png": guysleyPng,
	"mrman.png":   mrmanPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"guysley.png": &bintree{guysleyPng, map[string]*bintree{}},
	"mrman.png":   &bintree{mrmanPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
